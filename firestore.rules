/**
 * @fileoverview Firestore Security Rules for the CrewClock application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, combined with strict
 * path-based ownership for store crew and attendance logs. Administrative
 * privileges are granted based on the presence of a document in the
 * `/roles_admin/{uid}` collection.
 *
 * Data Structure:
 * - /roles_admin/{uid}:  Admin role assignments.
 * - /stores/{storeId}: Store information.
 * - /stores/{storeId}/crew/{crewId}: Store crew member information.
 * - /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}: Attendance logs
 *   for crew members.
 * - /broadcasts/{broadcastId}: Broadcast messages targeted to specific stores.
 *
 * Key Security Decisions:
 * - Only users with a document in `/roles_admin/{uid}` can create, update, or
 *   delete stores.
 * - Store crew and attendance logs are secured using path-based ownership,
 *   ensuring that only admins or the crew member associated with a given path
 *   can access the data.
 * - Read access to store crew and attendance logs is restricted to the owner or
 *   an admin.
 * - Broadcast messages are readable by all authenticated users, with filtering
 *   on the client-side based on the `storeIds` array within the message. Only admins can create broadcasts.
 *
 * Denormalization for Authorization:
 * - The `storeId` is denormalized within the `AttendanceLog` documents to
 *   avoid needing to perform a `get()` request on the parent `StoreCrew`
 *   document for authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin role access based on document existence.
     * @path /roles_admin/{uid}
     * @allow (get, create, update, delete) if user is the document owner.
     * @deny (get, create, update, delete) if user is not the document owner.
     * @principle Enforces user-ownership for role assignment.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn() && isOwner(uid);
      allow list: if false; // Prevent listing of admin roles for security.
      allow create: if isSignedIn() && isOwner(uid);
      allow update: if false;
      allow delete: if isSignedIn() && isOwner(uid);
    }

    /**
     * @description Manages store information, accessible only to admins.
     * @path /stores/{storeId}
     * @allow (get, list) Publicly available to get the stores info
     * @allow (create, update, delete) only for users who are admins.
     * @deny (create, update, delete) for non-admins.
     * @principle Restricts store management to admin users.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages store crew information with path-based ownership.
     * @path /stores/{storeId}/crew/{crewId}
     * @allow (get, list) only for users who are admins or the document owner.
     * @allow (create) only for users who are admins or if the document does not exists
     * @allow (update, delete) only for users who are admins or the document owner and it exists
     * @deny (get, list, create, update, delete) for non-admins and non-owners.
     * @principle Enforces path-based ownership for crew management.
     */
    match /stores/{storeId}/crew/{crewId} {
      allow get, list: if isAdmin() || isOwner(crewId);
      allow create: if isAdmin();
      allow update: if isAdmin() || isExistingOwner(crewId);
      allow delete: if isAdmin() || isExistingOwner(crewId);
    }

    /**
     * @description Manages attendance logs with path-based ownership and storeId denormalization.
     * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
     * @allow (get, list) only for admins or the crew member associated with the log.
     * @allow (create) only for admins or the crew member creating their log.
     * @allow (update, delete) only for admins or the crew member associated with the log (if the log exists).
     * @deny (get, list, create, update, delete) for non-admins and non-owners.
     * @principle Enforces strict path-based ownership and validates relational integrity.
     */
    match /stores/{storeId}/crew/{crewId}/attendance/{attendanceId} {
      allow get, list: if isAdmin() || isOwner(crewId);
      allow create: if isAdmin();
      allow update: if isAdmin() || isExistingOwner(crewId);
      allow delete: if isAdmin() || isExistingOwner(crewId);
    }

    /**
     * @description Manages broadcast messages, accessible to all but creatable only by admins.
     * @path /broadcasts/{broadcastId}
     * @allow (get, list) for all authenticated users.
     * @allow (create) only for admins.
     * @allow (update, delete) never.
     * @deny (create) for non-admins.
     * @principle Restricts broadcast creation to admins and provides public read access.
     */
    match /broadcasts/{broadcastId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and if the resource exists.
     * @param {string} userId The user ID to check against the resource's data.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}