/**
 * @fileoverview Firestore Security Rules for the Crew Attendance application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership, enforcing strict controls
 * over data access. It uses a combination of public read access for some
 * collections (e.g., stores) and owner-only access for user-specific data.
 *
 * Data Structure:
 * - /stores/{storeId}: Publicly readable information about store locations.
 * - /crew/{crewId}: Information about crew members.
 * - /attendance/{attendanceId}: Logs of crew member attendance.
 * - /broadcasts/{broadcastId}: Broadcast messages to crew members.
 *
 * Key Security Decisions:
 * - Stores are publicly readable but only modifiable by authenticated users (TODO: implement admin role).
 * - Listing stores is allowed for all users.
 * - Crew members and attendance logs are only accessible to authenticated users.
 *
 * Denormalization for Authorization:
 * The rules do not currently denormalize data. However, for more complex access
 * control scenarios (e.g., allowing store managers to access attendance logs),
 * consider denormalizing data such as roles or store ownership into the
 * relevant documents.
 *
 * Structural Segregation:
 * No structural segregation is currently used. If drafts or private versions
 * of data are needed, consider using separate collections or subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read store information, but restricts modifications.
     * @path /stores/{storeId}
     * @allow (get, list): Any user can read the store.
     * @deny (create, update, delete): Only authenticated users should modify store information.
     * @principle Allows public read access for stores.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Implement admin role for store management.
    }

    /**
     * @description Restricts access to crew member information to authenticated users.
     * @path /crew/{crewId}
     * @allow (create): Only authenticated users can create crew member entries.
     * @allow (get, list): Only authenticated users can read crew member entries.
     * @allow (update, delete): Only authenticated users can modify crew member entries.
     * @principle Enforces access control for crew data.
     */
    match /crew/{crewId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Restricts access to attendance log information to authenticated users.
     * @path /attendance/{attendanceId}
     * @allow (create): Only authenticated users can create attendance log entries.
     * @allow (get, list): Only authenticated users can read attendance log entries.
     * @allow (update, delete): Only authenticated users can modify attendance log entries.
     * @principle Enforces access control for attendance logs.
     */
    match /attendance/{attendanceId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Restricts access to broadcast messages to authenticated users.
     * @path /broadcasts/{broadcastId}
     * @allow (create): Only authenticated users can create broadcast messages.
     * @allow (get, list): Only authenticated users can read broadcast messages.
     * @allow (update, delete): Only authenticated users can modify broadcast messages.
     * @principle Enforces access control for broadcast messages.
     */
    match /broadcasts/{broadcastId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}