/**
 * @description This ruleset enforces a role-based access control model with admin overrides.
 * Data is organized hierarchically with stores, crew members, and attendance logs.
 * Authorization independence is maintained by denormalizing data where necessary.
 *
 * @dataStructure
 * - /roles_admin/{userId}: Admin role definitions. Document existence grants admin privileges.
 * - /stores/{storeId}: Store information.
 * - /stores/{storeId}/crew/{crewId}: Store crew member information.
 * - /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}: Attendance logs for crew members.
 * - /broadcasts/{broadcastId}: Broadcast messages targeted to specific stores.
 *
 * @keySecurityDecisions
 * - Admin role is determined by the presence of a document in `/roles_admin/{userId}`.
 * - Path-based ownership is enforced for crew members and attendance logs.
 * - `list` operations are restricted to admins for the `/roles_admin` collection.
 * - All write operations require authentication (`request.auth != null`).
 * - Data validation is limited to relational integrity and ownership fields to facilitate prototyping.
 *
 * @denormalizationForAuthorization
 * - Attendance logs duplicate the `storeId` to avoid `get()` calls for authorization.
 *
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin access based on document existence in the `/roles_admin/{uid}` collection.
     * @path /roles_admin/{uid}
     * @allow (get, create, update, delete) if isAdmin(userId)
     * @deny (create, update, delete) if !isAdmin(userId)
     * @principle Enforces admin-only access to admin role definitions.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages store information; only admins can create, update, and delete stores.
     * @path /stores/{storeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only management of store data.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages store crew information, enforcing path-based ownership and admin overrides.
     * @path /stores/{storeId}/crew/{crewId}
     * @allow (get, list) if isCrewMember(storeId, crewId) || isAdmin()
     * @allow (create, update, delete) if isCrewMember(storeId, crewId) || isAdmin()
     * @deny (create, update, delete) if !isCrewMember(storeId, crewId) && !isAdmin()
     * @principle Enforces ownership or admin access for crew management.
     */
    match /stores/{storeId}/crew/{crewId} {
      allow get, list: if isCrewMember(storeId, crewId) || isAdmin();
      allow create: if isSignedIn() && (request.auth.uid == request.resource.data.crewId) && (request.resource.data.storeId == storeId);
      allow update: if isSignedIn() && (isExistingCrewMember(storeId, crewId) || isAdmin());
      allow delete: if isSignedIn() && (isExistingCrewMember(storeId, crewId) || isAdmin());
    }

    /**
     * @description Manages attendance logs, enforcing path-based ownership, admin overrides, and data consistency.
     * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
     * @allow (get, list) if isCrewMember(storeId, crewId) || isAdmin()
     * @allow (create, update, delete) if isCrewMember(storeId, crewId) || isAdmin()
     * @deny (create, update, delete) if !isCrewMember(storeId, crewId) && !isAdmin()
     * @principle Enforces ownership or admin access for attendance log management.
     */
    match /stores/{storeId}/crew/{crewId}/attendance/{attendanceId} {
      allow get, list: if isCrewMember(storeId, crewId) || isAdmin();
      allow create: if isSignedIn() && (request.auth.uid == crewId) && (request.resource.data.storeCrewId == crewId);
      allow update: if isSignedIn() && (isExistingCrewMember(storeId, crewId) || isAdmin());
      allow delete: if isSignedIn() && (isExistingCrewMember(storeId, crewId) || isAdmin());
    }

    /**
     * @description Manages broadcast messages; only admins can create, update, and delete broadcasts.
     * @path /broadcasts/{broadcastId}
     * @allow (get, list) if true;
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only management of broadcast messages.
     */
    match /broadcasts/{broadcastId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an administrator.
     * @return {bool} True if the user is an administrator, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is a crew member.
     * @param {string} storeId The ID of the store.
     * @param {string} crewId The ID of the crew member.
     * @return {bool} True if the user is the specified crew member, false otherwise.
     */
    function isCrewMember(storeId, crewId) {
      return isSignedIn() && request.auth.uid == crewId;
    }

    /**
     * @description Checks if the user is the existing crew member.
     * @param {string} storeId The ID of the store.
     * @param {string} crewId The ID of the crew member.
     * @return {bool} True if the user is the specified existing crew member, false otherwise.
     */
    function isExistingCrewMember(storeId, crewId) {
        return isSignedIn() && exists(/databases/$(database)/documents/stores/$(storeId)/crew/$(crewId)) && isCrewMember(storeId, crewId);
    }
  }
}