/**
 * @fileoverview Firestore Security Rules for the Crew Attendance application.
 *
 * Core Philosophy:
 * This ruleset is in prototyping mode, prioritizing a highly secure authorization model
 * while remaining flexible on data shapes.  It enforces strict ownership and role-based access
 * wherever possible, but avoids detailed schema validation to enable rapid iteration.
 *
 * Data Structure:
 * - /stores/{storeId}: Stores location and basic info.
 * - /crew/{crewId}: Crew member profiles.
 * - /attendance/{attendanceId}: Attendance logs.
 * - /broadcasts/{broadcastId}: Broadcast messages.
 *
 * Key Security Decisions:
 * - No user listing is allowed for any collections.
 * - In the absence of defined roles, a strict owner-only access policy is applied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure the /stores collection.
     * @path /stores/{storeId}
     * @allow (get, list): Any authenticated user can read store information.
     * @allow (create, update, delete): Only the owner can modify store information.
     * @deny (create, update, delete): Non-owners cannot modify store data.
     * @principle Public read, owner-only writes with signed-in requirement.
     */
    match /stores/{storeId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure the /crew collection.
     * @path /crew/{crewId}
     * @allow (get, list): Any authenticated user can read crew information.
     * @allow (create, update, delete): Only the owner can modify crew information.
     * @deny (create, update, delete): Non-owners cannot modify crew data.
     * @principle Public read, owner-only writes with signed-in requirement.
     */
    match /crew/{crewId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure the /attendance collection.
     * @path /attendance/{attendanceId}
     * @allow (get, list): Any authenticated user can read attendance logs.
     * @allow (create, update, delete): Only the owner can modify attendance logs.
     * @deny (create, update, delete): Non-owners cannot modify attendance data.
     * @principle Public read, owner-only writes with signed-in requirement.
     */
    match /attendance/{attendanceId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure the /broadcasts collection.
     * @path /broadcasts/{broadcastId}
     * @allow (get, list): Any authenticated user can read broadcast messages.
     * @allow (create, update, delete): Only the owner can modify broadcast messages.
     * @deny (create, update, delete): Non-owners cannot modify broadcast data.
     * @principle Public read, owner-only writes with signed-in requirement.
     */
    match /broadcasts/{broadcastId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if a user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}