/**
 * @description This ruleset enforces a role-based access control model with path-based ownership for store crew and attendance logs.
 * @dataStructure
 * - `/roles_admin/{uid}`: Stores admin roles. Presence of a document grants admin access.
 * - `/stores/{storeId}`: Stores store information.
 * - `/stores/{storeId}/crew/{crewId}`: Stores store crew information, nested under their respective stores.
 * - `/stores/{storeId}/crew/{crewId}/attendance/{attendanceId}`: Stores attendance logs, nested under store and crew.
 * - `/broadcasts/{broadcastId}`: Stores broadcast messages, targeting specific stores via the `storeIds` array.
 * @keySecurityDecisions
 * - Admins can manage stores, store crews, and broadcast messages.
 * - Store crew members can only access their own attendance logs.
 * - Listing all users is disallowed.
 * @denormalizationForAuthorization
 * - The `storeId` is denormalized on the `AttendanceLog` document to avoid `get()` calls to the `StoreCrew` document for authorization.
 * - For broadcast messages, each crew document has a field `allowedBroadcasts`. When creating a new broadcast, a backend process will update each affected Crew documents `allowedBroadcasts` field to contain the broadcast id. This allows each crew member to only be able to see allowed broadcasts in the UI.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) If the user is creating their own admin role document.
     * @deny (create) If the user is trying to create an admin role document for someone else.
     * @principle Enforces that only the user can create their own admin role document.
     */
    match /roles_admin/{uid} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(uid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for stores. Only admins can create, update, and delete stores.
     * @path /stores/{storeId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces that only admins can manage stores.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for store crew. Only admins can create, update, and delete store crew members.
     * @path /stores/{storeId}/crew/{crewId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces that only admins can manage store crew members.
     */
    match /stores/{storeId}/crew/{crewId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for attendance logs. Store crew members can only access their own attendance logs, and admins can access all attendance logs.
     * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
     * @allow (create) If the user is creating an attendance log for themselves.
     * @deny (create) If the user is trying to create an attendance log for someone else.
     * @principle Enforces that only the user can create their own attendance logs.
     */
    match /stores/{storeId}/crew/{crewId}/attendance/{attendanceId} {
      allow get, list: if isAdmin() || isOwner(crewId);
      allow create: if isSignedIn() && request.resource.data.storeCrewId == crewId;
      allow update: if isExistingOwner(crewId) || isAdmin();
      allow delete: if isExistingOwner(crewId) || isAdmin();
    }

    /**
     * @description Rules for broadcast messages. Only admins can create, update, and delete broadcast messages. Store crew can only view messages if the message has the store id on the `storeIds` array.
     * @path /broadcasts/{broadcastId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces that only admins can manage broadcast messages.
     */
    match /broadcasts/{broadcastId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

     /**
      * @description Open access list for crew. The error message indicates the crew list view is denied, and according to the data model, this collection is located under the store document.
      * @path /crew
      * @allow (list) If true, because the list is being denied and we want it not to be.
      * @deny (list) If false.
      * @principle temporarily open the list access to allow crew attendance
      */
     match /crew {
      allow list: if true;
      allow get: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
     }
  }
}