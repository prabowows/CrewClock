rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a helper function to check if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a helper function to check if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a helper function to check if the user is the existing owner of the document.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /stores collection.
     * @path /stores/{storeId}
     * @allow (get, list): Any user can read stores data.
     * @allow (create): Only authenticated users can create stores.
     * @allow (update, delete): Only authenticated users can update or delete stores.
     * @deny (create): Unauthenticated user tries to create a store.
     * @deny (update, delete): Unauthenticated user tries to update/delete a store.
     * @principle Public read, authenticated write access.
     */
    match /stores/{storeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /crew collection.
     * @path /crew/{crewId}
     * @allow (get, list): Any user can read crew data.
     * @allow (create): Only authenticated users can create crew.
     * @allow (update, delete): Only authenticated users can update or delete crew.
     * @deny (create): Unauthenticated user tries to create a crew.
     * @deny (update, delete): Unauthenticated user tries to update/delete a crew.
     * @principle Public read, authenticated write access.
     */
    match /crew/{crewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /attendance collection.
     * @path /attendance/{attendanceId}
     * @allow (get, list): Any user can read attendance data.
     * @allow (create): Only authenticated users can create attendance.
     * @allow (update, delete): Only authenticated users can update or delete attendance.
     * @deny (create): Unauthenticated user tries to create attendance.
     * @deny (update, delete): Unauthenticated user tries to update/delete attendance.
     * @principle Public read, authenticated write access.
     */
    match /attendance/{attendanceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() ;
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /broadcasts collection.
     * @path /broadcasts/{broadcastId}
     * @allow (get, list): Any user can read broadcast data.
     * @allow (create): Only authenticated users can create broadcasts.
     * @allow (update, delete): Only authenticated users can update or delete broadcasts.
     * @deny (create): Unauthenticated user tries to create a broadcast.
     * @deny (update, delete): Unauthenticated user tries to update/delete a broadcast.
     * @principle Public read, authenticated write access.
     */
    match /broadcasts/{broadcastId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}