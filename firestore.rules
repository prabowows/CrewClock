rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the resource data.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Rules for the /stores collection.
     * @path /stores/{storeId}
     * @allow (get) Authenticated user can get a store.
     * @allow (list) Authenticated user can list stores.
     * @allow (create) Authenticated user can create a store.
     * @allow (update) Authenticated user can update a store.
     * @allow (delete) Authenticated user can delete a store.
     * @deny (get) Unauthenticated user cannot get a store.
     * @deny (list) Unauthenticated user cannot list stores.
     * @deny (create) Unauthenticated user cannot create a store.
     * @deny (update) Unauthenticated user cannot update a store.
     * @deny (delete) Unauthenticated user cannot delete a store.
     * @principle Requires authentication for all operations.
     */
    match /stores/{storeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /crew collection.
     * @path /crew/{crewId}
     * @allow (get) Authenticated user can get a crew member.
     * @allow (list) Authenticated user can list crew members.
     * @allow (create) Authenticated user can create a crew member.
     * @allow (update) Authenticated user can update a crew member.
     * @allow (delete) Authenticated user can delete a crew member.
     * @deny (get) Unauthenticated user cannot get a crew member.
     * @deny (list) Unauthenticated user cannot list crew members.
     * @deny (create) Unauthenticated user cannot create a crew member.
     * @deny (update) Authenticated user cannot update a crew member.
     * @deny (delete) Authenticated user cannot delete a crew member.
     * @principle Requires authentication for all operations.
     */
    match /crew/{crewId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /attendance collection.
     * @path /attendance/{attendanceId}
     * @allow (get) Authenticated user can get an attendance log.
     * @allow (list) Authenticated user can list attendance logs.
     * @allow (create) Authenticated user can create an attendance log.
     * @allow (update) Authenticated user can update an attendance log.
     * @allow (delete) Authenticated user can delete an attendance log.
     * @deny (get) Unauthenticated user cannot get an attendance log.
     * @deny (list) Unauthenticated user cannot list attendance logs.
     * @deny (create) Unauthenticated user cannot create an attendance log.
     * @deny (update) Authenticated user can update an attendance log.
     * @deny (delete) Authenticated user cannot delete an attendance log.
     * @principle Requires authentication for all operations.
     */
    match /attendance/{attendanceId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /broadcasts collection.
     * @path /broadcasts/{broadcastId}
     * @allow (get) Authenticated user can get a broadcast message.
     * @allow (list) Authenticated user can list broadcast messages.
     * @allow (create) Authenticated user can create a broadcast message.
     * @allow (update) Authenticated user can update a broadcast message.
     * @allow (delete) Authenticated user can delete a broadcast message.
     * @deny (get) Unauthenticated user cannot get a broadcast message.
     * @deny (list) Unauthenticated user cannot list broadcast messages.
     * @deny (create) Unauthenticated user cannot create a broadcast message.
     * @deny (update) Authenticated user cannot update a broadcast message.
     * @deny (delete) Authenticated user cannot delete a broadcast message.
     * @principle Requires authentication for all operations.
     */
    match /broadcasts/{broadcastId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}