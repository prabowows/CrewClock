/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access controls on all data.
 * It cautiously assumes no authentication or authorization unless explicitly granted.
 *
 * Data Structure:
 * - /stores/{storeId}: Stores information about store locations.
 * - /crew/{crewId}: Stores information about crew members.
 * - /attendance/{attendanceId}: Stores attendance logs for crew members.
 * - /broadcasts/{broadcastId}: Stores broadcast messages for all crew members.
 *
 * Key Security Decisions:
 * - Public listing of any collections is disallowed, as this is a common source of accidental data leakage.
 * - The default security posture is closed. All read and write access must be explicitly granted by a rule.
 *
 * Denormalization for Authorization:
 *  None.
 *
 * Structural Segregation:
 *  Not applicable in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to the stores collection.
     * @path /stores/{storeId}
     * @allow (get) Any authenticated user can get a store.
     * @allow (create, update, delete) No one can create, update, or delete a store.
     * @deny (list) No one can list stores.
     * @principle Closed access.
     */
    match /stores/{storeId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to the crew collection.
     * @path /crew/{crewId}
     * @allow (get) Any authenticated user can get a crew member.
     * @allow (create, update, delete) No one can create, update, or delete a crew member.
     * @deny (list) Listing of crew members is denied, as reported by NextJS error.
     * @principle Closed access.
     */
    match /crew/{crewId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to the attendance collection.
     * @path /attendance/{attendanceId}
     * @allow (get) Any authenticated user can get an attendance log.
     * @allow (create, update, delete) No one can create, update, or delete an attendance log.
     * @deny (list) No one can list attendance logs.
     * @principle Closed access.
     */
    match /attendance/{attendanceId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to the broadcasts collection.
     * @path /broadcasts/{broadcastId}
     * @allow (get) Any authenticated user can get a broadcast message.
     * @allow (create, update, delete) No one can create, update, or delete a broadcast message.
     * @deny (list) No one can list broadcast messages.
     * @principle Closed access.
     */
    match /broadcasts/{broadcastId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}