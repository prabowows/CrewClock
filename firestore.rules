/**
 * @fileoverview Firestore Security Rules for the CrewClock application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with a special "admin" role and path-based ownership where applicable.
 * Data access is restricted to authorized users and admins.
 *
 * Data Structure:
 * - /roles_admin/{uid}: Admin role assignments.
 * - /stores/{storeId}: Store information, manageable by admins.
 * - /stores/{storeId}/crew/{crewId}: Store crew information, access restricted to admins and the crew member themselves.
 * - /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}: Attendance logs, access restricted to admins and the crew member.
 * - /broadcasts/{broadcastId}: Broadcast messages targeted at specific stores. Read is public if no `storeIds` are present, restricted if present.
 *
 * Key Security Decisions:
 * - Admins can manage all stores and crew data.
 * - Crew members can only access their own attendance logs.
 * - Listing of admin roles is disallowed.
 * - Broadcast messages are readable by everyone if the storeIds array is empty.
 *
 * Denormalization for Authorization:
 * - The `storeId` is duplicated on the AttendanceLog document to avoid needing a `get()` call to the parent `crew` document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for nearly all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces that update and delete operations only apply to existing documents.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the admin role.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks if the user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    match /roles_admin/{uid} {
      /**
       * @description Only admins can create admin roles.
       * @path /roles_admin/{uid}
       * @allow (create) - An admin can create a role for any user.
       * @deny (create) - A non-admin user cannot create a role.
       * @principle Enforces admin-only role creation.
       */
      allow create: if isAdmin();

      /**
       * @description Only admins can read admin roles.
       * @path /roles_admin/{uid}
       * @allow (get) - An admin can read any user's role.
       * @deny (get) - A non-admin user cannot read roles.
       * @principle Enforces admin-only role reading.
       */
      allow get: if isAdmin();

      /**
       * @description No one can list admin roles.
       * @path /roles_admin/{uid}
       * @allow None - Listing is always disallowed.
       * @deny (list) - Any user attempting to list roles.
       * @principle Prevents unauthorized enumeration of admin roles.
       */
      allow list: if false;

      /**
       * @description Only admins can update admin roles.
       * @path /roles_admin/{uid}
       * @allow (update) - An admin can update any user's role.
       * @deny (update) - A non-admin user cannot update roles.
       * @principle Enforces admin-only role updates.
       */
      allow update: if isAdmin();

      /**
       * @description Only admins can delete admin roles.
       * @path /roles_admin/{uid}
       * @allow (delete) - An admin can delete any user's role.
       * @deny (delete) - A non-admin user cannot delete roles.
       * @principle Enforces admin-only role deletion.
       */
      allow delete: if isAdmin();
    }

    match /stores/{storeId} {
      /**
       * @description Allows admins to create, read, update, and delete stores.
       * @path /stores/{storeId}
       * @allow (create) - An admin can create a new store.
       * @allow (get) - Anyone can read a store's information.
       * @allow (list) - Anyone can list stores.
       * @allow (update) - An admin can update a store.
       * @allow (delete) - An admin can delete a store.
       * @deny (create) - A non-admin user cannot create a store.
       * @deny (update) - A non-admin user cannot update a store.
       * @deny (delete) - A non-admin user cannot delete a store.
       * @principle Enforces admin-only management of store data, public read access.
       */
      allow create: if isAdmin();
      allow get, list: if true;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;

      match /crew/{crewId} {
        /**
         * @description Allows admins to manage store crew, and crew members to read their own data.
         * @path /stores/{storeId}/crew/{crewId}
         * @allow (create) - An admin can create a crew member.
         * @allow (get) - An admin or the crew member themselves can read the data.
         * @allow (list) - An admin can list crew members.
         * @allow (update) - An admin can update a crew member's information, or the crew member can update their own information.
         * @allow (delete) - An admin can delete a crew member.
         * @deny (create) - A non-admin user cannot create a crew member.
         * @deny (get) - A non-admin and non-crew member cannot read the data.
         * @deny (update) - A non-admin user cannot update a crew member's information.
         * @deny (delete) - A non-admin user cannot delete a crew member.
         * @principle Enforces admin or self-ownership of crew data.
         */
        allow create: if isAdmin();
        allow get: if isAdmin() || isOwner(crewId);
        allow list: if isAdmin();
        allow update: if (isAdmin() || isExistingOwner(crewId));
        allow delete: if isAdmin() && resource != null;

        match /attendance/{attendanceId} {
          /**
           * @description Allows admins to manage attendance logs, and crew members to read and create their own logs.
           * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
           * @allow (create) - An admin or the crew member themselves can create an attendance log.
           * @allow (get) - An admin or the crew member themselves can read the attendance log.
           * @allow (list) - An admin or the crew member themselves can list attendance logs.
           * @allow (update) - An admin can update an attendance log, or the crew member can update their own log.
           * @allow (delete) - An admin can delete an attendance log.
           * @deny (create) - A non-admin user cannot create an attendance log for another crew member.
           * @deny (get) - A non-admin and non-crew member cannot read the attendance log.
           * @deny (update) - A non-admin user cannot update an attendance log for another crew member.
           * @deny (delete) - A non-admin user cannot delete an attendance log.
           * @principle Enforces admin or self-ownership of attendance log data.
           */
          allow create: if isSignedIn() && (isAdmin() || request.resource.data.storeCrewId == crewId);
          allow get: if isAdmin() || isOwner(crewId);
          allow list: if isAdmin() || isOwner(crewId);
          allow update: if (isAdmin() || isExistingOwner(crewId));
          allow delete: if isAdmin() && resource != null;
        }
      }
    }

    match /broadcasts/{broadcastId} {
      /**
       * @description Allows admins to create and manage broadcast messages, and crew members to read messages targeted at their store.
       * @path /broadcasts/{broadcastId}
       * @allow (create) - An admin can create a broadcast message.
       * @allow (get) - Anyone can read if `storeIds` is empty; Admins can read all, store crew only if their storeId is in `storeIds`.
       * @allow (list) - Everyone
       * @allow (update) - An admin can update a broadcast message.
       * @allow (delete) - An admin can delete a broadcast message.
       * @deny (create) - A non-admin user cannot create a broadcast message.
       * @deny (update) - A non-admin user cannot update a broadcast message.
       * @deny (delete) - A non-admin user cannot delete a broadcast message.
       * @principle Enforces admin-only creation of broadcast messages, and store-targeted readership.
       */
      allow create: if isAdmin();
      allow get: if true;
      allow list: if true;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}