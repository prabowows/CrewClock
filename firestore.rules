rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Admin role assignments. Presence of a document for a UID indicates admin access.
     * @path /roles_admin/{uid}
     * @allow (create) - An admin can create their own role document (self-assignment).
     * @deny (create) - A non-admin user attempts to create an admin role document.
     * @principle Self-Creation: Allows a user to create their own admin role if they are an admin.
     */
    match /roles_admin/{uid} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores information about each store, such as its name and location. Admins can create and manage stores.
     * @path /stores/{storeId}
     * @allow (get, list) - Anyone can read store information.
     * @allow (create) - Admins can create stores.
     * @deny (update, delete) - Non-admins cannot update or delete stores.
     * @principle Public Read with Owner-Only Writes: Allows public read access, but restricts writes to admins only.
     */
    match /stores/{storeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Stores store crew information. Enforces path-based ownership for security.
     * @path /stores/{storeId}/crew/{crewId}
     * @allow (get, list) - Admins can read store crew information.
     * @allow (create) - Admins can create store crew members.
     * @deny (update, delete) - Non-admins cannot update or delete store crew members.
     * @principle Path-Based Ownership: Enforces ownership based on the document path; only admins can create, update, and delete crew members.
     */
    match /stores/{storeId}/crew/{crewId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Stores attendance logs. Enforces path-based ownership; includes denormalized 'storeId' for authorization independence.
     * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
     * @allow (get, list) - Admins can read attendance logs.
     * @allow (create) - Admins can create attendance logs.
     * @deny (update, delete) - Non-admins cannot update or delete attendance logs.
     * @principle Path-Based Ownership: Enforces ownership based on the document path; only admins can create, update, and delete attendance logs.
     */
    match /stores/{storeId}/crew/{crewId}/attendance/{attendanceId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Stores broadcast messages. The 'storeIds' array indicates which stores should receive the message.
     * @path /broadcasts/{broadcastId}
     * @allow (get, list) - Anyone can read broadcast messages.
     * @allow (create) - Only admins can create broadcast messages.
     * @deny (update, delete) - Non-admins cannot update or delete broadcast messages.
     * @principle Public Read with Owner-Only Writes: Allows public read access, but restricts writes to admins only.
     */
    match /broadcasts/{broadcastId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
  }
}