/**
 * @fileoverview Firestore Security Rules for the CrewClock application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with path-based ownership,
 * ensuring data integrity and security across different collections.
 *
 * Data Structure:
 * - /roles_admin/{uid}: Stores admin roles. Document existence grants admin privileges.
 * - /stores/{storeId}: Stores store information.
 * - /stores/{storeId}/crew/{crewId}: Stores store crew member information.
 * - /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}: Stores attendance logs.
 * - /broadcasts/{broadcastId}: Stores broadcast messages, with storeIds indicating target stores.
 *
 * Key Security Decisions:
 * - Admin roles are determined by the existence of a document in `/roles_admin/{uid}`.
 * - Path-based ownership is enforced for stores, crew members, and attendance logs.
 * - Read access to broadcast messages is determined by the message's `storeIds` array.
 * - Data validation is minimal, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Attendance logs contain a denormalized `storeId` to avoid `get()` calls to the `crew` document.
 * - Broadcast messages contain a `storeIds` array to indicate which stores should receive the message.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the authenticated user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /roles_admin/{uid} collection.
     * @path /roles_admin/{uid}
     * @allow (create) User with matching UID can create their admin role document.
     * @deny (create) User tries to create an admin role document with a mismatched UID.
     * @allow (get) Any signed-in user can check for an admin role document (for UI purposes).
     * @deny (list) Listing admin roles is not allowed.
     * @principle Enforces admin role creation only by the user themselves and prevents unauthorized listing.
     */
    match /roles_admin/{uid} {
      allow create: if isSignedIn() && isOwner(uid);
      allow get: if isSignedIn();
      allow list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Rules for the /stores/{storeId} collection.
     * @path /stores/{storeId}
     * @allow (create) Only admins can create stores.
     * @allow (get, list) Any signed-in user can read store information.
     * @deny (update, delete) Only admins can update or delete stores.
     * @principle Enforces admin-only management of stores while allowing public read access.
     */
    match /stores/{storeId} {
      allow create: if isAdmin();
      allow get, list: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /stores/{storeId}/crew/{crewId} collection.
     * @path /stores/{storeId}/crew/{crewId}
     * @allow (create) Only admins can create crew members.
     * @allow (get, list) Admins or the crew member themselves can read crew information.
     * @deny (update, delete) Only admins can update or delete crew members.
     * @principle Enforces admin-only management of crew members with owner access for reads.
     */
    match /stores/{storeId}/crew/{crewId} {
      allow create: if isAdmin();
      allow get: if isSignedIn() && (isAdmin() || isOwner(crewId));
      allow list: if isAdmin();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /stores/{storeId}/crew/{crewId}/attendance/{attendanceId} collection.
     * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
     * @allow (create) Only admins or the crew member themselves can create attendance logs, validating storeId.
     * @allow (get, list) Admins or the crew member themselves can read attendance logs.
     * @deny (update, delete) Only admins can update or delete attendance logs.
     * @principle Enforces admin or owner-only management of attendance logs, with validation on create.
     */
    match /stores/{storeId}/crew/{crewId}/attendance/{attendanceId} {
      allow create: if isSignedIn() && (isAdmin() || isOwner(crewId));
      allow get: if isSignedIn() && (isAdmin() || isOwner(crewId));
      allow list: if isSignedIn() && (isAdmin() || isOwner(crewId));
      allow update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /broadcasts/{broadcastId} collection.
     * @path /broadcasts/{broadcastId}
     * @allow (create) Only admins can create broadcast messages.
     * @allow (get, list) Any signed-in user can read broadcast messages.
     * @deny (update, delete) Only admins can update or delete broadcast messages.
     * @principle Enforces admin-only management of broadcast messages with public read access.
     */
    match /broadcasts/{broadcastId} {
      allow create: if isAdmin();
      allow get, list: if isSignedIn();
      allow update, delete: if isAdmin();
    }
    
     /**
      * @description Rules for the /crew collection. This is a security vulnerability and must be fixed.
      * @path /crew
      * @allow (list) Any signed-in user can list crew members.
      * @principle This rule is insecure and must be fixed. It allows any signed-in user to list crew members.
      */
    match /crew/{crewId} {
        allow get: if false;
        allow list: if false;
      	allow create: if false;
      	allow update: if false;
      	allow delete: if false;
    }
  }
}