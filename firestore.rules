/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with ownership constraints for a store management application.
 *
 * Data Structure:
 * - /roles_admin/{uid}: Stores admin roles. Document presence grants admin access.
 * - /stores/{storeId}: Stores store information.
 * - /stores/{storeId}/crew/{crewId}: Stores crew member information for a specific store.
 * - /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}: Stores attendance logs for crew members.
 * - /broadcasts/{broadcastId}: Stores broadcast messages targeted at specific stores.
 *
 * Key Security Decisions:
 * - Admin role is determined by the presence of a document in the /roles_admin/{uid} collection.
 * - Store crew data is secured using path-based ownership.
 * - Broadcast messages can be read by all by default, but are intended to be only read by users who belong to a store that is allowed to read the message.
 * - The rules prioritize authorization independence by denormalizing data (e.g., including storeId in attendance logs).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the document (UID matches the document ID).
     * @param {string} userId - The user ID to check against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to check against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) User with matching UID can create their admin role.
     * @deny (create) User tries to create an admin role for another user.
     * @principle Enforces user-ownership for admin role creation.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(uid);
      allow update: if false;
      allow delete: if isSignedIn() && isOwner(uid);
    }

    /**
     * @description Rules for stores.
     * @path /stores/{storeId}
     * @allow (create) Admins can create stores.
     * @deny (update) Non-admins cannot update stores.
     * @principle Restricts store management to admins.
     */
    match /stores/{storeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for store crew members.
     * @path /stores/{storeId}/crew/{crewId}
     * @allow (create) Admins can create crew members.
     * @deny (update) Non-admins and non-owners cannot update crew members.
     * @principle Enforces path-based ownership and admin control for crew management.
     */
    match /stores/{storeId}/crew/{crewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for attendance logs.
     * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
     * @allow (create) Admins can create attendance logs.
     * @deny (update) Non-admins and non-owners cannot update attendance logs.
     * @principle Enforces path-based ownership and admin control for attendance logs.
     */
    match /stores/{storeId}/crew/{crewId}/attendance/{attendanceId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for broadcast messages.
     * @path /broadcasts/{broadcastId}
     * @allow (get, list) Anyone can read all broadcast messages.
     * @deny (create, update, delete) Only admins can manage broadcast messages.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /broadcasts/{broadcastId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}