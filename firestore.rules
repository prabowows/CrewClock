rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user's ID to compare with the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource (i.e., the resource exists and the user is the owner).
     * @param {string} userId The user's ID to compare with the authenticated user's ID.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for admin roles. Admins have full read/write access.
     * @path /roles_admin/{uid}
     * @allow (create) If the authenticated user's UID matches the document ID, allowing self-creation of admin role.
     * @deny (create) If the authenticated user's UID does not match the document ID.
     * @allow (get) If the user is an admin.
     * @deny (get) If the user is not an admin.
     * @principle Enforces admin-only access to role management.
     */
    match /roles_admin/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow get: if isAdmin();
       allow read: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for stores. Admins can create, read, update, and delete stores.
     * @path /stores/{storeId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @allow (get) If true - public read.
     * @deny (get) Never applies.
     * @allow (list) If true - public read.
     * @deny (list) Never applies.
     * @allow (update) If the user is an admin.
     * @deny (update) If the user is not an admin.
     * @allow (delete) If the user is an admin.
     * @deny (delete) If the user is not an admin.
     * @principle Enforces admin-only management of stores.
     */
    match /stores/{storeId} {
      allow create: if isAdmin();
      allow get: if true;
      allow list: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
       allow read: if true;
    }

    /**
     * @description Rule for store crew members. Admins can create, read, update, and delete crew members.
     *              Store crew members can read, update, and delete their own data.
     * @path /stores/{storeId}/crew/{crewId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @allow (get) If the user is an admin or the crew member themselves.
     * @deny (get) If the user is not an admin or the crew member themselves.
     * @allow (list) If the user is an admin.
     * @deny (list) If the user is not an admin.
     * @allow (update) If the user is an admin or the crew member themselves (and the document exists).
     * @deny (update) If the user is not an admin or the crew member themselves, or the document doesn't exist.
     * @allow (delete) If the user is an admin.
     * @deny (delete) If the user is not an admin.
     * @principle Enforces admin or owner-only access to crew data.
     */
    match /stores/{storeId}/crew/{crewId} {
      allow create: if isAdmin();
      allow get: if isAdmin() || (isSignedIn() && request.auth.uid == crewId);
      allow list: if isAdmin();
      allow update: if isAdmin() || (isSignedIn() && request.auth.uid == crewId);
      allow delete: if isAdmin();
       allow read: if isAdmin() || (isSignedIn() && request.auth.uid == crewId);
    }

    /**
     * @description Rule for attendance logs. Admins can create, read, update, and delete attendance logs.
     *              Store crew members can read, update, and delete their own attendance logs.
     * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
     * @allow (create) If the user is an admin or the crew member themselves.
     *                 The 'storeId' must match the path.
     * @deny (create) If the user is not an admin or the crew member themselves, or the storeId doesn't match.
     * @allow (get) If the user is an admin or the crew member themselves.
     * @deny (get) If the user is not an admin or the crew member themselves.
     * @allow (list) If the user is an admin.
     * @deny (list) If the user is not an admin.
     * @allow (update) If the user is an admin or the crew member themselves (and the document exists).
     * @deny (update) If the user is not an admin or the crew member themselves, or the document doesn't exist.
     * @allow (delete) If the user is an admin.
     * @deny (delete) If the user is not an admin.
     * @principle Enforces admin or owner-only access to attendance data.
     */
    match /stores/{storeId}/crew/{crewId}/attendance/{attendanceId} {
      allow create: if isAdmin() || (isSignedIn() && request.auth.uid == crewId);
      allow get: if isAdmin() || (isSignedIn() && request.auth.uid == crewId);
      allow list: if isAdmin();
      allow update: if isAdmin() || (isSignedIn() && request.auth.uid == crewId);
      allow delete: if isAdmin();
       allow read: if isAdmin() || (isSignedIn() && request.auth.uid == crewId);
    }

    /**
     * @description Rule for broadcast messages. Only admins can create, update, and delete broadcast messages.
     *              All users can read broadcast messages.
     * @path /broadcasts/{broadcastId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @allow (get) If true - public read.
     * @deny (get) Never applies.
     * @allow (list) If true - public read.
     * @deny (list) Never applies.
     * @allow (update) If the user is an admin (and the document exists).
     * @deny (update) If the user is not an admin, or the document doesn't exist.
     * @allow (delete) If the user is an admin (and the document exists).
     * @deny (delete) If the user is not an admin, or the document doesn't exist.
     * @principle Enforces admin-only management of broadcasts.
     */
    match /broadcasts/{broadcastId} {
      allow create: if isAdmin();
      allow get: if true;
      allow list: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
       allow read: if true;
    }
  }
}