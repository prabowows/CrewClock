rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{uid}
     * @allow (create) If the authenticated user's UID matches the document ID, creating the admin role.
     * @allow (get, list) If the authenticated user's UID matches the document ID, reading their admin role.
     * @allow (update, delete) If the authenticated user's UID matches the document ID, updating or deleting their admin role.
     * @deny (create, update, delete, get, list) If the authenticated user's UID does not match the document ID.
     * @principle Enforces strict user-ownership; only the user whose ID matches the document ID can access it.
     */
    match /roles_admin/{uid} {
      allow create: if isSignedIn() && isOwner(uid);
      allow get: if isSignedIn() && isOwner(uid);
      allow list: if isSignedIn() && isOwner(uid);
      allow update: if isSignedIn() && isOwner(uid);
      allow delete: if isSignedIn() && isOwner(uid);
    }

    /**
     * @description Manages store information; only admins can create, read, update, or delete stores.
     * @path /stores/{storeId}
     * @allow (create) If the user is an admin, creating a new store.
     * @allow (get, list) If the user is an admin, reading store information.
     * @allow (update, delete) If the user is an admin, updating or deleting store information.
     * @deny (create, update, delete) If the user is not an admin.
     * @principle Restricts store management to admin users.
     */
    match /stores/{storeId} {
      allow create: if isAdmin();
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();

      /**
       * @description Manages store crew information; admins and the crew member themselves can access their data.
       * @path /stores/{storeId}/crew/{crewId}
       * @allow (create) If the user is an admin, creating a new crew member.
       * @allow (get, list) If the user is an admin or the crew member themselves, reading crew information.
       * @allow (update, delete) If the user is not an admin and not the crew member, updating or deleting crew information.
       * @deny (create, update, delete) If the user is not an admin or the crew member.
       * @principle Enforces path-based ownership; admins and the crew member can manage their own data.
       */
      match /crew/{crewId} {
        allow create: if isAdmin();
        allow get: if isAdmin() || isOwner(crewId);
        allow list: if isAdmin();
        allow update: if isAdmin() || isOwner(crewId);
        allow delete: if isAdmin();

        /**
         * @description Manages attendance logs; admins and the associated crew member can access their own logs.
         * @path /stores/{storeId}/crew/{crewId}/attendance/{attendanceId}
         * @allow (create) If the user is an admin, creating a new attendance log.
         * @allow (get, list) If the user is the associated crew member or an admin, reading attendance logs.
         * @allow (update, delete) If the user is not the crew member or an admin, updating or deleting attendance logs.
         * @deny (create, update, delete) If the user is not the crew member or an admin.
         * @principle Enforces path-based ownership; admins and the crew member can manage their attendance logs.
         */
        match /attendance/{attendanceId} {
          allow create: if isAdmin();
          allow get: if isAdmin() || isCrewMember(crewId);
          allow list: if isAdmin() || isCrewMember(crewId);
          allow update: if isAdmin() || isCrewMember(crewId);
          allow delete: if isAdmin();
        }
      }
    }

    /**
     * @description Manages broadcast messages; only admins can create and manage broadcast messages.
     * @path /broadcasts/{broadcastId}
     * @allow (create) If the user is an admin, creating a new broadcast message.
     * @allow (get, list) Anyone can read broadcast messages.
     * @allow (update, delete) If the user is not an admin, updating or deleting broadcast messages.
     * @deny (create, update, delete) If the user is not an admin.
     * @principle Restricts broadcast message management to admin users; messages are publicly readable.
     */
    match /broadcasts/{broadcastId} {
      allow create: if isAdmin();
      allow get: if true;
      allow list: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // =========================
    // Helper Functions
    // =========================

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in; false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the user is the owner; false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * @return True if the user has admin privileges; false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

     /**
      * @description Checks if the user is the owner of the existing document.
      * @param userId The user ID to compare against the authenticated user's UID.
      * @return True if the user is the owner of the existing document; false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId);
    }

    function isCrewMember(crewId) {
        return request.auth.uid == crewId;
    }
  }
}